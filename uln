#!/bin/bash
## uln ::

print_help() {
cat <<'HELPDOC'
NAME
    uln - link or copy multiple files at once

SYNOPSIS
    uln <COMMAND> [OPTION...]

DESCRIPTION
    Uln is symbolic link creator and/or file copier controlled via config file.
    Uln reads a .uln file in the current directory.

COMMANDS
    init
        Create new .uln file in current directory.

    link
        Create symbolic links defined in .uln file.

    copy
        Copy files defined in .uln file.

OPTIONS
    -D, --dry-run
        Perform trial run making no changes.

    -H, --help
        Display this help.

    -c, --config <FILE>
        Read config from FILE instead of .uln default.

FILES
    .uln - strict-yaml file containing following keys:

        dest
            Link/copy destination directory. Required.

        srcs
            Source files.

HOSTNAME
    The file linked/copied may be dependent upon HOSTNAME by appending
    _HOSTNAME to filename. For example, if FILE.EXT is in srcs, a link to
    FILE_HOSTNAME.EXT will be created, if it exists, instead of FILE.EXT.
HELPDOC
}

# TODO: add option to select between absolute/relative links
# TODO: list/query action

## internal control ::
a=0
arg="$1"
args=("$@")
arr_config=()
dest=
dpath=
file_config='.uln'
file_path=
flg_copy=false
flg_dryrun=false
flg_init=false
flg_link=false
flg_srcs=false
host="$HOSTNAME"
line=
lines=
n_acts=0
opt_config=
sdir=
sname=
spath=
src=
srcs=()

[ -f '/etc/hostname' ] && host="$(cat /etc/hostname)"
[ -f '/etc/hostname-' ] && host="$(cat /etc/hostname-)"

## functions ::
msg() { printf "\e[1;38;5;12m=> \e[0;38;5;15m$1\e[0m\n" "${@:2}" ;}
msg_error() { printf "\e[1;38;5;9mE: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2 ;}
msg_warn() { printf "\e[1;38;5;11mW: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2 ;}
msg_cmd() {
    local clr=$'\e[1;38;5;10m' txt=' $'
    [ $EUID -eq 0 ] && clr=$'\e[1;38;5;9m' txt=' #'
    [ "$flg_dryrun" = true ] && clr=$'\e[1;38;5;11m'
    printf '%s%s \e[0;38;5;15m%s\e[0m\n' "$clr" "$txt" "$(printf '%q ' "$@")"
}
error() { msg_error "$@"; exit 5 ;}

## main ::
while [ -n "$arg" ]; do case "$arg" in
    init) flg_init=true; arg="${args[((++a))]}"; ((n_acts++)) ;;
    link) flg_link=true; arg="${args[((++a))]}"; ((n_acts++)) ;;
    copy) flg_copy=true; arg="${args[((++a))]}"; ((n_acts++)) ;;
    -D|--dryrun) flg_dryrun=true; arg="${args[((++a))]}" ;;
    -H|--help) print_help; exit 0 ;;
    -c|--config)
        [ $# -le $((a+1)) ] && error "arg required: $arg"
        opt_config="${args[((++a))]}"; arg="${args[((++a))]}" ;;
    -[DH]*)
        [[ ! "${arg:2:1}" =~ [DHc] ]] && error "unknown option: ${arg:2:1}"
        args[a--]="-${arg:2}"; arg="${arg:0:2}" ;;
    -[c]*) args[a]="${arg:2}"; arg="${arg:0:2}"; ((a--)) ;;
    --) ((a++)); break ;;
    *) break ;;
esac; done
args=("${args[@]:a}")

[ ${#args[@]} -gt 0 ] && error "unknown args: ${args[*]}"
[ $n_acts -eq 0 ] && error 'no action'
[ $n_acts -gt 1 ] && error 'too many actions'

# set config file from command line option:
file_config="${opt_config:-$file_config}"

if [ "$flg_init" = true ]; then
    # create new .uln file in current directory:
    [ -f "$file_config" ] && error "$file_config already exists"
    touch "$file_config"
    { printf '## %s ::\n\n' "$(realpath "$file_config")"
    printf 'dest: %s\n\nsrcs:\n\n# vim:ft=yaml\n' "$HOME" ;} > "$file_config"
    exit 0
fi

# config not found:
[ ! -f "$file_config" ] && error "config not found: $file_config"

# parse config:
mapfile -t lines < <(sed -E -e 's/(^\s+|\s+$)//g' -e '/^(#|$|-$)/d' "$file_config")
flg_srcs=false
for line in "${lines[@]}"; do
    if [ "$flg_srcs" = true ]; then
        [[ "$line" =~ ^-\ +(.*) ]] && srcs+=("${BASH_REMATCH[1]}") && continue
        flg_srcs=false
    fi
    [[ "$line" =~ ^dest:\ +(.*) ]] && dest="${BASH_REMATCH[1]}" && continue
    [ "$line" = 'srcs:' ] && flg_srcs=true && continue
done

# no destination directory:
[ -z "$dest" ] && error 'no destination directory'

# substitute leading ~ in destination directory with $HOME:
[ "${dest:0:1}" = '~' ] && dest="$HOME${dest:1}"

# remove trailing slash from destination directory:
[ "${dest: -1}" = '/' ] && dest="${dest:0:-1}"

for src in "${srcs[@]}"; do
    # TODO: need to check if any src contains any src:

    # remove trailing slash from src file/dir:
    [ "${src: -1}" = '/' ] && src="${src:0:-1}"

    # set destination path:
    dpath="$dest/$src"

    # set src destination directory and name:
    spath="$PWD/$src"
    sdir="${spath%/*}"
    sname="${spath##*/}"

    # change src name if a src file with _HOSTNAME appended exists:
    if [[ "${sname:1}" =~ '.' ]] && [ -e "$sdir/${sname%.*}_$host.${sname##*.}" ]; then
        sname="${sname%.*}_$host.${sname##*.}"
    elif [ -e "$sdir/${sname}_$host" ]; then
        sname="${sname}_$host"
    fi

    # set and check src path:
    spath="$sdir/$sname"
    [ ! -e "$spath" ] && continue

    # create link to src file:
    if [ "$flg_link" = true ]; then
        # destination is not a symlink or it's pointing to the wrong src:
        if [ ! -h "$dpath" ] || [ "$(readlink "$dpath")" != "$spath" ]; then
            [ "$flg_dryrun" = true ] && msg_cmd ln -sf "$spath" "$dpath" && continue
            # create parent directories:
            if mkdir -p "${dpath%/*}" &>/dev/null &&
            # remove previous file:
            rm -rf "$dpath" &>/dev/null &&
            # create link:
            ln -sf "$spath" "$dpath" &>/dev/null; then
                msg_cmd ln -sf "$spath" "$dpath"
            else
                msg_error "unable to create link: $dpath"
            fi
        fi

    # copy src file:
    elif [ "$flg_copy" = true ]; then
        # destination file doesn't exist or it's different from src file:
        if ! diff -rq --no-dereference "$dpath" "$spath" &>/dev/null; then
            [ "$flg_dryrun" = true ] && msg_cmd cp -r "$spath" "$dpath" && continue
            # create parent directories:
            if mkdir -p "${dpath%/*}" &>/dev/null &&
            # remove previous file:
            rm -rf "$dpath" &>/dev/null &&
            # copy file/directory:
            cp -r "$spath" "$dpath" &>/dev/null; then
                msg_cmd cp -r "$spath" "$dpath"
            else
                msg_error "unable to create copy: $dpath"
            fi
        fi
    fi
done

# vim:ft=bash
